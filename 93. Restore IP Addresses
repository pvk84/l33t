class Solution {
public:
    
    bool isValidIPBit(std::string& s){
        int len = s.length();
        if(len > 3){
            return false;
        }else if(len == 3){
            if(s.at(0) == '0'){
                return false;
            }
            int num = std::stoi(s);
            if(num > 255){
                return false;
            }
        }else if(len == 2){
            if(s.at(0) == '0'){
                return false;
            }
        }
        
        return true;
    }
    
    void restoreIpAddresses(int start, std::string ip, int bits, std::string& s, std::vector<string>& ipVec){
        //std::cout << start << ", " <<bits << ", " << ip << std::endl;
        int slen = s.size();
        if(bits == 4){
            //std::cout << "Inside bits. " << ip <<std::endl;
            if(start >= slen){
                ipVec.push_back(ip);
            }
            return;
        }else if(bits > 4){
            return;
        }
        
        int diff = std::min(slen-start, 3);
        for(int i=1; i <= diff; i++){
            std::string ipStr = s.substr(start, i);
            //std::cout << "\t" << start <<": " << i << ", " << ipStr;
            if(!isValidIPBit(ipStr)){
                //std::cout << " ...Invalid. " << std::endl;
                continue;
            }else{
                //std::cout << " ...Valid. " << std::endl;
            }
            std::string newIP;
            if(bits < 3){
                newIP = ip+ipStr+".";
            }else{
                newIP = ip+ipStr;
            }
            int newBits = bits+1;
            restoreIpAddresses(start+i, newIP,  newBits, s, ipVec);
        }
        
    }
    
    vector<string> restoreIpAddresses(string s) {
        std::vector<string> ipVec;
        restoreIpAddresses(0, "", 0, s, ipVec);
        return ipVec;
    }
};
