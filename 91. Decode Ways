class Solution {
public:
    std::vector<int> dpMap;
    std::vector<string> result;
    Solution(){
        //alphabetString = "-ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    }
    
    int dp(string& s, int N){
        if(N ==0){
            return 0;
        }
        
        //char last1Str = s.at(N-1);
        int last1 = s.at(N-1) - '0';
        if(N == 1){
            if(last1 == 0){
                return 0;
            }else{
                return 1;
            }
        }
        
        int last2 = s.at(N-2)-'0';
        int count = 0;
        
        if(last2 == 0){
            count = 0;
        }else if(last1 == 0){
            if(last2 < 3){
                count = 1;
            }else{
                count = 0;
            }
        }else if(last2*10+last1 > 26){
            count = 1;
        }else if(last2*10+last1 <= 26){
            count = 2;
        }
        
        if(N == 2){
           return count; 
        }
        
        if(last1 > 0 && dpMap[N-1] == 0){
            dpMap[N-1] = dp(s, N-1);
        }
        
        if(count>0 && dpMap[N-2] == 0){
            dpMap[N-2] = dpMap[N-2] = dp(s, N-2);
        }
        dpMap[N] = (last1 > 0 ? dpMap[N-1] : 0)+(count>0 ? dpMap[N-2] : 0);
        return dpMap[N];
    }
    
    int dp_new(string& s, int N){
        if(N ==0){
            return 0;
        }
        
        if(N ==0){
            return 0;
        }
        
        //char last1Str = s.at(N-1);
        int last1 = s.at(N-1) - '0';
        if(N == 1){
            if(last1 == 0){
                return 0;
            }else{
                return 1;
            }
        }
        
        int last2 = s.at(N-2)-'0';
        int count = 0;
        
        if(last2 == 0){
            count = 0;
        }else if(last1 == 0){
            if(last2 < 3){
                count = 1;
            }else{
                count = 0;
            }
        }else if(last2*10+last1 > 26){
            count = 1;
        }else if(last2*10+last1 <= 26){
            count = 2;
        }
        
        if(N == 2){
           return count; 
        }
        
        
        
    }
    
    int numDecodings(string s) {
        int size = s.length();
        if(size < 1){
            return size;
        }
        dpMap.resize(size+1, 0);
        return dp(s, size);
    }
};
