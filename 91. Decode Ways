class Solution {
public:
    
    bool isValid(string str){
        if(str.empty()){
            return false;
        }
        if(str.length() > 2){
            throw "Invalid string";
        }
        if(str.at(0) == '0'){
            return false;
        }
        int num = std::stoi(str);
        if(num > 26){
            return false;
        }
        return true;
    }
    
    int numDecodings(string& s, int begin, int end, std::vector<int>& dp){
        //std::cout << begin << ": " << end << endl;
        if(dp[begin] != -1){
            return dp[begin];
        }
        int decodings = 0;
        
        if(end-begin >= 0){
            string first = s.substr(begin, 1);
            int firstDecodings = 0;
            
            if(isValid(first)){
                if(begin+1 > end){
                    firstDecodings = 1;    
                }else{
                    firstDecodings = numDecodings(s, begin+1, end, dp);
                    dp[begin+1] = firstDecodings;
                }
            }
            decodings+= firstDecodings;
        }
        
        if(end-begin >= 1){
            string second = s.substr(begin, 2);
            int secondDecodings = 0;
            if(isValid(second)){
                if(begin+2 > end){
                    secondDecodings = 1;
                }else{
                    secondDecodings = numDecodings(s, begin+2, end, dp);
                    dp[begin+2] = secondDecodings;
                }
            }
            decodings+= secondDecodings;
        }
        
        dp[begin] = decodings;
        
        return decodings;
        
    }
    
    int numDecodings(string s) {
        if(s.empty()){
            return 0;
        }
        int size = s.length();
        std::vector<int> dp(size, -1);
        return numDecodings(s, 0, size-1, dp);
    }
};
