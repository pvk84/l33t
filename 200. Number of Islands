class Solution {
public:
    struct element{
        int x, y;
    };
    
    bool isAdjacent(int x1,int x2,int y1,int y2){
        return ((x1-x2) == 0 || (y1-y2) == 0);
    }
    
    void numIslands(vector<vector<char>>& grid, int X, int Y, int& count) {
        
        std::stack<element> lands;
        bool breakFlag = false;
        for(int i=0; i< X; i++){
            for(int j=0; j < Y; j++){
                if(grid[i][j] == '1'){
                    element el;
                    el.x = i;
                    el.y = j;
                    lands.push(el);
                    breakFlag = true;
                    break;
                }
            }
            if(breakFlag){
                break;
            }
        }
        if(lands.size() == 0){
            return;
        }
        
        count++;
        
        //std::cout << "lands: " << lands.size() << endl;
        std::map<std::pair<int,int>, bool> visitedMap;
        while(!lands.empty()){
            element land = lands.top();
            lands.pop();
            int x = land.x;
            int y = land.y;
            grid[x][y] = '0';
            //std::cout << x << "X" << y <<endl;
            if(visitedMap.find(std::make_pair(x,y)) != visitedMap.end()){
                continue;
            }
            
            visitedMap[std::make_pair(x,y)] = true;
            if(x+1 < X){
                if(visitedMap.find(std::make_pair(x+1,y)) == visitedMap.end()){
                    if(grid[x+1][y] != '0'){
                        grid[x+1][y] = '0';
                        element temp;
                        temp.x = x+1;
                        temp.y = y;
                        lands.push(temp);
                    }
                }
            }
            if(x-1 >= 0){
                if(visitedMap.find(std::make_pair(x-1,y)) == visitedMap.end()){
                    if(grid[x-1][y] != '0'){
                        grid[x-1][y] = '0';
                        //visitedMap[std::make_pair(x-1,y)] = true;
                        element temp;
                        temp.x = x-1;
                        temp.y = y;
                        lands.push(temp);
                    }
                }
            }
            if(y+1 < Y){
                if(visitedMap.find(std::make_pair(x,y+1)) == visitedMap.end()){
                    if(grid[x][y+1] != '0'){
                        grid[x][y+1] = '0';
                        //visitedMap[std::make_pair(x,y+1)] = true;
                        element temp;
                        temp.x = x;
                        temp.y = y+1;
                        lands.push(temp);
                    }
                }
            }
            if(y-1 >= 0){
                if(visitedMap.find(std::make_pair(x,y-1)) == visitedMap.end()){
                    if(grid[x][y-1] != '0'){
                        grid[x][y-1] = '0';
                        //visitedMap[std::make_pair(x,y-1)] = true;
                        element temp;
                        temp.x = x;
                        temp.y = y-1;
                        lands.push(temp);
                    }
                }
            }
            
        }
        
        numIslands(grid, X, Y, count);
        
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int X = grid.size(), Y = 1;
        if(X){
            Y = grid[0].size();
        }else{
            return 0;
        }
        //std::cout <<"Grid size: " << X << "X" << Y <<endl;
        
        int count = 0;
        numIslands(grid, X, Y, count);
        
        
        return count;
        
    }
};
