class Solution {
    std::unordered_map<char, string> mKeyMap;
    std::unordered_map<string, char> mValMap;
public:
    
    std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems) {
        std::stringstream ss(s);
        std::string item;
        while (std::getline(ss, item, delim)) {
            elems.push_back(item);
        }
        return elems;
    }


    std::vector<std::string> split(const std::string &s, char delim) {
        std::vector<std::string> elems;
        split(s, delim, elems);
        return elems;
    }
    
    bool wordPattern(string pattern, string str) {
        std::vector<std::string> vec = split(str, ' ');
        if(vec.size() != pattern.length()){
            return false;
        }
        for(int i=0; i < pattern.length(); i++){
            if(mKeyMap.find(pattern[i]) == mKeyMap.end()){
                mKeyMap.insert(std::make_pair(pattern[i] , vec[i]));
            }else{
                if(mKeyMap[pattern[i]] != vec[i]){
                    return false;
                }
            }
            
            if(mValMap.find(vec[i]) == mValMap.end()){
                mValMap.insert(std::make_pair(vec[i] , pattern[i]));
            }else{
                if(mValMap[vec[i]] != pattern[i]){
                    return false;
                }
            }
        }
        return true;
    }
};
