/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:

    void splice(ListNode*& node, ListNode*& mergeList){
        ListNode* temp = node->next;
        node->next = nullptr;
        if(mergeList){
            mergeList->next = node;
        }else{
            mergeList = node;
        }
        node = temp;
    }
    
    void mergeTwoLists(ListNode*& l1, ListNode*& l2, ListNode*& mergeList){
        if(!l1 && !l2){
            return;
        }else if(!l1){
            if(mergeList){
                mergeList->next = l2;
            }else{
                mergeList = l2;
            }
            return;
        }else if(!l2){
            if(mergeList){
                mergeList->next = l1;
            }else{
                mergeList = l1;
            }
            return;
        }
        ListNode* firstHead = l1;
        ListNode* secondHead = l2;
        if(l1->val <= l2->val){
            splice(l1, mergeList);
        }else{
            splice(l2, mergeList);
        }
        mergeTwoLists(l1, l2, (mergeList->next? mergeList->next : mergeList));
    }
    
    ListNode* mergeTwoLists_Old(ListNode* l1, ListNode* l2) {
        ListNode* mergeList = nullptr;
        mergeTwoLists(l1,l2,mergeList);
        return mergeList;
    }
    
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1 && !l2){
            return nullptr;
        }else if(!l1){
            return l2;
        }else if(!l2){
            return l1;
        }
        ListNode* mergeList;
        if(l1->val <= l2->val){
            mergeList = l1;
            mergeList->next = mergeTwoLists(l1->next, l2);
        }else{
            mergeList = l2;
            mergeList->next = mergeTwoLists(l1, l2->next);
        }
        return mergeList;
    }
    
};
