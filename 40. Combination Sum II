class Solution {
public:

        void combinationSum(int start, int sum, std::vector<int> sumVec, int target, vector<int>& candidates, 
                                                    std::vector<std::vector<int>>& combinations) {
        if(sum == target){
            combinations.push_back(sumVec);
            return;
        }else if(sum > target){
            return;
        }
        
        if(start >= candidates.size()){
            return;
        }
        
        for(int i=start; i< candidates.size(); i++){
            int candidate = candidates[i];
            if (i > start && candidate == candidates[i-1]) {
                continue;
            }
            sumVec.push_back(candidate);
            combinationSum(i+1, sum+candidate, sumVec, target, candidates, combinations);
            sumVec.pop_back();
        }
        
    }
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        std::vector<std::vector<int>> combinations;
        std::vector<int> sumVec;
        std::sort(candidates.begin(), candidates.end());
        combinationSum(0, 0, sumVec, target, candidates, combinations);
        return combinations;
    }
};
