class Solution {
public:
    std::vector<int> getPascalRow(int n){
        if(n == 1){
            return std::vector<int>(1, 1); 
        }
        if(n == 2){
            return std::vector<int>(2, 1); 
        }
        
        std::vector<int> previousVec = getPascalRow(n-1);
        int prevLength = previousVec.size();
        int newLength = prevLength+1;
        std::vector<int> newVec;
        newVec.resize(prevLength+1);
        for(int i=0; i< newLength; i++){
            if(i == 0 || i == newLength -1){
                newVec[i] = 1;
            }else{
                newVec[i] = previousVec[i-1]+previousVec[i];
            }
        }
        return newVec;
    }
    vector<vector<int>> generate(int numRows) {
        std::vector<std::vector<int>> pascalTriangle;
        for(int i=1; i<= numRows; i++){
            pascalTriangle.push_back(getPascalRow(i));
        }
        return pascalTriangle;
    }
};
