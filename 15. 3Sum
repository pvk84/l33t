class Solution {
public:
    
    struct VectorHash {
        size_t operator()(const std::vector<int>& v) const {
            std::hash<int> hasher;
            size_t seed = 0;
            for (int i : v) {
                seed ^= hasher(i) + 0x9e3779b9 + (seed<<6) + (seed>>2);
            }
            return seed;
        }
    };
    
    vector<vector<int>> threeSum(vector<int>& nums) {
        int N = nums.size();
        std::vector<std::vector<int>> sumvec;
        if(N < 1){
            return std::vector<std::vector<int>>();
        }
        std::sort(nums.begin(), nums.end());
        
        std::unordered_set<std::vector<int>, VectorHash> set;
        
        int count = 0;
        for(int i=0; i < N; i++){
            int target = 0 - nums[i];
            std::vector<int> vec;
            int begin = 0, end = N-1;
            //std::cout << "Loop " << (i) << ": " << target << endl;
            while(begin < end){
                if(nums[begin]+nums[end] == target){
                    //std::cout << nums[i] << ", " << nums[begin] << ", " << nums[end] << endl;
                    if(begin != i && end != i)
                    {
                        
                        vec.push_back(nums[i]);
                        vec.push_back(nums[begin]);
                        vec.push_back(nums[end]);
                        std::sort(vec.begin(), vec.end());
                        sumvec.push_back(vec);
                        //set.insert(vec);
                        count++;
                    }
                    break;
                }
                while(begin < end && nums[begin]+nums[end] > target){
                    end--;
                }
                while(begin < end && nums[begin]+nums[end] < target){
                    begin++;
                }
                end--;begin++;
            }
            
        }
        //std::cout << count << endl;
        
         //std::vector<std::vector<int>> sumvec(set.begin(), set.end());
         //std::sort(sumvec.begin(), sumvec.end());
        //sumvec.erase(unique(sumvec.begin(), sumvec.end()), sumvec.end());
         return sumvec;
    }
};
