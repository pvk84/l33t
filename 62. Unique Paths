class Solution {
public:
    std::unordered_map<std::string, int> pathMap;
    int uniquePaths_topDown(int m, int n) {
        if(m == 1 ||  n == 1){
            return 1;
        }
        
        std::string firstStr = std::to_string(m)+":"+std::to_string(n-1);
        int first = pathMap[firstStr]? pathMap[firstStr]: (pathMap[firstStr] = uniquePaths(m,n-1));
        std::string secondStr = std::to_string(m-1)+":"+std::to_string(n);
        int second = pathMap[secondStr]? pathMap[secondStr]: (pathMap[secondStr] = uniquePaths(m-1,n));
        return (first+second);
    }
    
    int uniquePaths(int m, int n) {
        if(m == 1 ||  n == 1){
            return 1;
        }
        std::vector<std::vector<int>> vecvec(n, std::vector<int>(m, 1));
        for(int i=0; i < n; i++){
            for(int j=0; j < m; j++){
                if(i == 0 || j ==0){
                    vecvec[i][j] = 1;
                    continue;
                }
                vecvec[i][j] = vecvec[i-1][j]+vecvec[i][j-1];
            }
        }
        return vecvec[n-1][m-1];
    }
    
};
