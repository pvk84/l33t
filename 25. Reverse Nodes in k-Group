/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    
    ListNode* reverse(ListNode* head, int k, int rem) {
        if(k > rem){
            return head;
        }
        ListNode* current = head;
        ListNode* prev = nullptr;
        int len = 0;
        while(current){
            ListNode* next = current->next;
            current->next = prev;
            prev = current;
            current = next;
            len++;
            if(len == k){
                break;
            }
        }
        
        head->next = reverse(current, k, rem-k);
        return prev;
    }
    
    ListNode* reverseKGroup_recursive(ListNode* head, int k) {
        int len = 0;
        ListNode* current = head;
        while(current){
            len++;
            current = current->next;
        }
        
        return reverse(head, k, len);
        
    }
    
    
    ListNode* reverseKGroup_iterative(ListNode*& head, int k) {
        int len = 0;
        ListNode* current = head;
        while(current){
            len++;
            current = current->next;
        }
        
        if(k > len){
            return head;
        }
        
        ListNode* newHead = nullptr;
        ListNode* prev = nullptr;
        current = head;
        ListNode* tail = nullptr;
        ListNode* prevTail = nullptr;
        
        while(len >= k){
            tail = current;
            prev = nullptr;
            int loopLen = 0;
            while(current){
                ListNode* next = current->next;
                current->next = prev;
                prev = current;
                current = next;
                loopLen++;
                if(loopLen == k){
                    if(!newHead){
                        newHead = prev;
                    }
                    
                    if(prevTail){
                        prevTail->next = prev;
                    }
                    
                    break;
                }
            }
            prevTail = tail;
            len = len-k;
        }
        
        if(prevTail && current){
            prevTail->next = current;
        }
        
        return newHead;
        
    }
    
    ListNode* reverseKGroup(ListNode* head, int k) {
        return reverseKGroup_iterative(head, k);
    }
    
};
